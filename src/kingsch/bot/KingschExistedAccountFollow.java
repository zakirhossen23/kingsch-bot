/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kingsch.bot;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

/**
 *
 * @author zakir
 */
public class KingschExistedAccountFollow extends javax.swing.JFrame {

    /**
     * Creates new form KingschExistedAccountFollow
     */
    public KingschExistedAccountFollow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ContainingTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        urlText = new javax.swing.JTextField();
        InsertBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ContainingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Url"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ContainingTable);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        urlText.setText("Url start with https://");

        InsertBtn.setText("Insert");
        InsertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(urlText)
                    .addComponent(InsertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(urlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InsertBtn)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(153, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private void followurl(WebDriver driver, String url) {
        working:
        while (true) {
            try {
                driver.findElement(By.xpath("//*[@class=\"SuperuserProfile__actions-item ripple\"]")).click();
                System.out.println("followed");

                Thread.sleep(1000);
                break working;
            } catch (Exception e) {
            }
        }
    }
    int linecount = 0;
    public ChromeDriver driver;

    private static void unzip(Path source, Path target) throws IOException {

        try ( ZipInputStream zis = new ZipInputStream(new FileInputStream(source.toFile()))) {

            // list files in zip
            ZipEntry zipEntry = zis.getNextEntry();

            while (zipEntry != null) {

                boolean isDirectory = false;
                // example 1.1
                // some zip stored files and folders separately
                // e.g data/
                //     data/folder/
                //     data/folder/file.txt
                if (zipEntry.getName().endsWith(File.separator)) {
                    isDirectory = true;
                }

                Path newPath = zipSlipProtect(zipEntry, target);

                if (isDirectory) {
                    java.nio.file.Files.createDirectories(newPath);
                } else {

                    // example 1.2
                    // some zip stored file path only, need create parent directories
                    // e.g data/folder/file.txt
                    if (newPath.getParent() != null) {
                        if (java.nio.file.Files.notExists(newPath.getParent())) {
                            java.nio.file.Files.createDirectories(newPath.getParent());
                        }
                    }

                    // copy files, nio
                    Files.copy(zis, newPath, StandardCopyOption.REPLACE_EXISTING);

                    zis.close();
                    // copy files, classic
                    /*try (FileOutputStream fos = new FileOutputStream(newPath.toFile())) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = zis.read(buffer)) > 0) {
                            fos.write(buffer, 0, len);
                        }
                    }*/
                }

                zipEntry = zis.getNextEntry();

            }
            zis.closeEntry();

        }

    }
    // protect zip slip attack

    public static Path zipSlipProtect(ZipEntry zipEntry, Path targetDir)
            throws IOException {

        // test zip slip vulnerability
        // Path targetDirResolved = targetDir.resolve("../../" + zipEntry.getName());
        Path targetDirResolved = targetDir.resolve(zipEntry.getName());

        // make sure normalized file still has targetDir as its prefix
        // else throws exception
        Path normalizePath = targetDirResolved.normalize();
        if (!normalizePath.startsWith(targetDir)) {
            throw new IOException("Bad zip entry: " + zipEntry.getName());
        }

        return normalizePath;
    }

    private void OpenAndUpdateDriver(String url) throws Exception {
        boolean update = false;
        String ChromeVersion = "";
        String ChromeDriverVersion = "";
        while (true) {
            if (update == true) {

                //Get Chromedriver Path
                BufferedReader reader = null;
                URL urlLink = new URL("https://chromedriver.storage.googleapis.com/?delimiter=/&prefix=" + ChromeVersion);
                reader = new BufferedReader(new InputStreamReader(urlLink.openStream()));
                String s = null;
                while ((s = reader.readLine()) != null) {
                    break;
                }

                InputSource textSource = new InputSource(new StringReader(s));
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

                DocumentBuilder builder = factory.newDocumentBuilder();

                Document doc = builder.parse(textSource);
                NodeList nodelist = doc.getElementsByTagName("Prefix");

                Element element = (Element) nodelist.item(nodelist.getLength() - 2);
                ChromeDriverVersion = element.getTextContent();

                String Destination = "ChromeDriver\\chromedriver_win32.zip";
                String link = "https://chromedriver.storage.googleapis.com/" + ChromeDriverVersion + "chromedriver_win32.zip";
                //Closing ChromeDriver
                KingschAccount.StatusLBL.setText("Closing ChromeDriver");
                try {
                    Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
                } catch (Exception e) {
                };
                KingschAccount.StatusLBL.setText("Closed ChromeDriver");
                KingschAccount.StatusLBL.setText("Deleting Old ChromeDriver...");
                File Des = new File("ChromeDriver\\chromedriver.exe");
                //Deleting Existed one
                Des.delete();

                KingschAccount.StatusLBL.setText("Downloading Latest ChromeDriver...");
                URL urlChromeDriver = new URL(link);
                HttpURLConnection http = (HttpURLConnection) urlChromeDriver.openConnection();
                double fileSize = (double) http.getContentLengthLong();
                BufferedInputStream in = new BufferedInputStream(http.getInputStream());
                FileOutputStream fos = null;
                try {
                    fos = new FileOutputStream(Destination);
                } catch (Exception e) {
                    System.out.println(e);
                }
                //Closing ChromeDriver
                KingschAccount.StatusLBL.setText("Closing ChromeDriver");
                try {
                    Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
                } catch (Exception e) {
                };
                KingschAccount.StatusLBL.setText("Closed ChromeDriver");
                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);

                byte[] buffer = new byte[1024];
                double downloaded = 0.00;
                int read = 0;
                double percentDownloaded = 0.00;
                while ((read = in.read(buffer, 0, 1024)) >= 0) {
                    bout.write(buffer, 0, read);
                    downloaded += read;
                    percentDownloaded = (downloaded * 100) / fileSize;
                    String percent = String.format("%.2f", percentDownloaded);
                    KingschAccount.StatusLBL.setText(percent + "% Downloaded");
                }

                reader.close();
                bout.close();
                fos.close();
                in.close();
                Thread.sleep(1000);
                //Closing ChromeDriver
                KingschAccount.StatusLBL.setText("Closing ChromeDriver");
                try {
                    Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
                } catch (Exception e) {
                };
                KingschAccount.StatusLBL.setText("Closed ChromeDriver");
                Thread.sleep(1000);
                //Uzipping
                KingschAccount.StatusLBL.setText("Uzipping");
                Path source = Paths.get("ChromeDriver/chromedriver_win32.zip");
                Path target = Paths.get("ChromeDriver/");

                try {

                    unzip(source, target);
                    System.out.println("Done");

                } catch (IOException e) {
                    e.printStackTrace();
                }

                KingschAccount.StatusLBL.setText("Uzipped");

            }

            try {
                KingschAccount.StatusLBL.setText("Starting...");
                System.setProperty("webdriver.chrome.driver", "ChromeDriver\\chromedriver.exe");
                ChromeOptions options = new ChromeOptions();
                options.addArguments("--mute-audio");
                KingschAccount.StatusLBL.setText("Adding extension...");
                options.addExtensions(new File("C:\\Program Files\\Common Files\\ChromeDriver\\anticaptcha.crx"));
                DesiredCapabilities capabilities = new DesiredCapabilities();
                capabilities.setCapability(ChromeOptions.CAPABILITY, options);
                KingschAccount.StatusLBL.setText("Setting...");
                driver = new ChromeDriver(capabilities);
                driver.navigate().to(url);
                break;
            } catch (Exception e) {
                // String to be scanned to find the pattern.
                String line = e.getMessage();
                String pattern = "[0-9]+[.]";
                // Create a Pattern object
                Pattern r = Pattern.compile(pattern);
                // Now create matcher object.
                Matcher m = r.matcher(line);
                if (m.find()) {
                    ChromeVersion = m.group(0);
                }

                update = true;
                continue;
            }
        }

    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            BufferedReader br = null;
            br = new BufferedReader(new FileReader("C:\\Program Files\\Common Files\\CSVS\\Account.csv"));
            String line = "";

            String splitBy = ",";
            Reading:
            while ((line = br.readLine()) != null) {

                OpenAndUpdateDriver("https://accounts.kingsch.at/?client_id=com.kingschat&scopes=%5B%22kingschat%22%5D&redirect_uri=https%3A%2F%2Fweb.kingsch.at%2Ftimeline");

                String[] email = line.split(splitBy);    // use comma as separator
                String Email = email[0];
                login(driver, Email);
                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                }
                DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
                all:
                for (int i = 0; i < model.getRowCount(); i++) {
                    String url = model.getValueAt(i, 0).toString();

                    if (url.contains("https://")) {
                        driver.navigate().to(url);
                        followurl(driver, url);
                    }
                }

                driver.quit();
                linecount = linecount + 1;
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    }//GEN-LAST:event_jButton2ActionPerformed

    private void InsertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
        model.addRow(new Object[]{urlText.getText()});
    }//GEN-LAST:event_InsertBtnActionPerformed
    private void login(WebDriver driver, String email) {
        driver.findElement(By.xpath("//*[@placeholder=\"Username, Phone Number or E-mail\"]")).sendKeys(email);
        driver.findElement(By.xpath("//*[@placeholder=\"Password\"]")).sendKeys("Q123456789");
        driver.findElement(By.xpath("(//*[@class=\"submit-btn\"])[1]")).click();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KingschExistedAccountFollow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KingschExistedAccountFollow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KingschExistedAccountFollow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KingschExistedAccountFollow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KingschExistedAccountFollow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ContainingTable;
    private javax.swing.JButton InsertBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField urlText;
    // End of variables declaration//GEN-END:variables
}
