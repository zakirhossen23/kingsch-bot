/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kingsch.bot;

import java.awt.*;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

/**
 * @author zakir
 */
public class KingschPosting extends javax.swing.JFrame {

    /**
     * Creates new form KingschPosting
     */
    public KingschPosting() {
        initComponents();
        readaccounts();
    }

    int totalacc;

    private void readaccounts() {
        String line = "";
        String splitBy = ",";
        totalacc = 0;
        try {
            BufferedReader br = new BufferedReader(new FileReader("C:\\Program Files\\Common Files\\CSVS\\Account.csv"));
            Counting:
            while ((line = br.readLine()) != null) //returns a Boolean value
            {
                String[] email = line.split(splitBy);    // use comma as separator
                if (!(email[0].contains("@"))) {
                    continue Counting; // skip Counting
                }
                totalacc = totalacc + 1;
            }

            for (int i = 1; i < totalacc + 1; i++) {
                System.out.println(i);

                // get the model from the jtable
                DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();

                // insert row to the model from jtextfields using addRow method
                model.addRow(new Object[]{i, "", ""});
            }

        } catch (Exception e) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ContainingTable = new javax.swing.JTable();
        Start = new javax.swing.JButton();
        Stop = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        ImagePath = new javax.swing.JTextField();
        idLBL = new javax.swing.JLabel();
        imageLBL = new javax.swing.JLabel();
        Comments = new javax.swing.JTextField();
        checkText = new javax.swing.JCheckBox();
        checkImage = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Amoount = new javax.swing.JTextField();
        settoblank = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ContainingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Text", "Image/video", "time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ContainingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ContainingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ContainingTable);
        if (ContainingTable.getColumnModel().getColumnCount() > 0) {
            ContainingTable.getColumnModel().getColumn(0).setMinWidth(33);
            ContainingTable.getColumnModel().getColumn(0).setPreferredWidth(5);
            ContainingTable.getColumnModel().getColumn(0).setMaxWidth(33);
        }

        Start.setLabel("Start");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        Stop.setText("Stop");
        Stop.setToolTipText("");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        jButton1.setText("Choose");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ImagePath.setText("Image/Video Path");
        ImagePath.setEnabled(false);
        ImagePath.setMaximumSize(new java.awt.Dimension(62, 20));
        ImagePath.setMinimumSize(new java.awt.Dimension(62, 20));
        ImagePath.setPreferredSize(new java.awt.Dimension(162, 20));
        ImagePath.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                ImagePathInputMethodTextChanged(evt);
            }
        });

        idLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        idLBL.setText("Id");

        imageLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLBL.setText("Image");
        imageLBL.setToolTipText("");

        Comments.setText("Comment");
        Comments.setEnabled(false);
        Comments.setMaximumSize(new java.awt.Dimension(62, 20));
        Comments.setMinimumSize(new java.awt.Dimension(62, 20));
        Comments.setPreferredSize(new java.awt.Dimension(162, 20));
        Comments.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                CommentsInputMethodTextChanged(evt);
            }
        });

        checkText.setText("Selected Text");

        checkImage.setText("Selected Image");

        jButton2.setText("Set to all");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("to Set");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        Amoount.setText("Top first Set amount");

        settoblank.setText("Set to blank");
        settoblank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settoblankActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Amoount, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(idLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(imageLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ImagePath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(Comments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settoblank, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkText)
                    .addComponent(checkImage)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(Amoount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settoblank))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(idLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Comments, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(81, 81, 81)
                        .addComponent(Start)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Stop))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void login(WebDriver driver, String email) {
        driver.findElement(By.xpath("//*[@placeholder=\"Username, Phone Number or E-mail\"]")).sendKeys(email);
        driver.findElement(By.xpath("//*[@placeholder=\"Password\"]")).sendKeys("Q123456789");
        driver.findElement(By.xpath("(//*[@class=\"submit-btn\"])[1]")).click();

    }

    private void StartingPost(WebDriver driver, String Text, String ImageurL) {

        acceptingCookie:
        while (true) {
            try {
                Thread.sleep(1000);
                driver.findElement(By.xpath("//*[@class=\"CookiePopup__button\"]")).click();  //accept cookie

                break;
            } catch (Exception e) {

            }
        }
        clickingPost:
        while (true) {
            try {
                driver.findElement(By.xpath("//*[@aria-label='create-post']")).click();  //Create Post
                break;
            } catch (Exception e) {
                driver.findElement(By.xpath("//*[@class='LeftPanelButtons__blue-button']")).click();  //Create Post

            }
        }

        writingText:
        while (true) {
            try {
                String myString = Text;
                StringSelection stringSelection = new StringSelection(myString);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(stringSelection, null);

                Actions actions = new Actions(driver);
                Thread.sleep(1500);

                actions.keyDown(Keys.CONTROL);
                actions.sendKeys("v").build().perform();
                actions.keyUp(Keys.CONTROL);

                break writingText;
            } catch (Exception e) {
            }
        }

        if (!(ImageurL == "")) {
            inputtingfile:
            while (true) {
                try {
                    driver.findElement(By.xpath("(//*[@type=\"file\"])[2]")).sendKeys(ImageurL);  //file
                    Thread.sleep(4000);
                    break inputtingfile;
                } catch (Exception e) {
                }
            }
        }

        Posting:
        while (true) {
            try {
                if (driver.findElement(By.xpath("//*[contains(text(), 'Publish Post')]")).getAttribute("class").contains("active")) {
                    driver.findElement(By.xpath("//*[contains(text(), 'Publish Post')]")).click();  //post
                      Thread.sleep(700);

                } else {
                    continue;
                }
                break Posting;
            } catch (Exception e) {
            }
        }
    }
    public ChromeDriver driver;

    private static void unzip(Path source, Path target) throws IOException {

        try ( ZipInputStream zis = new ZipInputStream(new FileInputStream(source.toFile()))) {

            // list files in zip
            ZipEntry zipEntry = zis.getNextEntry();

            while (zipEntry != null) {

                boolean isDirectory = false;
                // example 1.1
                // some zip stored files and folders separately
                // e.g data/
                //     data/folder/
                //     data/folder/file.txt
                if (zipEntry.getName().endsWith(File.separator)) {
                    isDirectory = true;
                }

                Path newPath = zipSlipProtect(zipEntry, target);

                if (isDirectory) {
                    java.nio.file.Files.createDirectories(newPath);
                } else {

                    // example 1.2
                    // some zip stored file path only, need create parent directories
                    // e.g data/folder/file.txt
                    if (newPath.getParent() != null) {
                        if (java.nio.file.Files.notExists(newPath.getParent())) {
                            java.nio.file.Files.createDirectories(newPath.getParent());
                        }
                    }

                    // copy files, nio
                    Files.copy(zis, newPath, StandardCopyOption.REPLACE_EXISTING);

                    zis.close();
                    // copy files, classic
                    /*try (FileOutputStream fos = new FileOutputStream(newPath.toFile())) {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = zis.read(buffer)) > 0) {
                            fos.write(buffer, 0, len);
                        }
                    }*/
                }

                zipEntry = zis.getNextEntry();

            }
            zis.closeEntry();

        }

    }
    // protect zip slip attack

    public static Path zipSlipProtect(ZipEntry zipEntry, Path targetDir)
            throws IOException {

        // test zip slip vulnerability
        // Path targetDirResolved = targetDir.resolve("../../" + zipEntry.getName());
        Path targetDirResolved = targetDir.resolve(zipEntry.getName());

        // make sure normalized file still has targetDir as its prefix
        // else throws exception
        Path normalizePath = targetDirResolved.normalize();
        if (!normalizePath.startsWith(targetDir)) {
            throw new IOException("Bad zip entry: " + zipEntry.getName());
        }

        return normalizePath;
    }

    private void OpenAndUpdateDriver(String url) throws Exception {
        boolean update = false;
        String ChromeVersion = "";
        String ChromeDriverVersion = "";
        while (true) {
            if (update == true) {

                //Get Chromedriver Path
                BufferedReader reader = null;
                URL urlLink = new URL("https://chromedriver.storage.googleapis.com/?delimiter=/&prefix=" + ChromeVersion);
                reader = new BufferedReader(new InputStreamReader(urlLink.openStream()));
                String s = null;
                while ((s = reader.readLine()) != null) {
                    break;
                }

                InputSource textSource = new InputSource(new StringReader(s));
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

                DocumentBuilder builder = factory.newDocumentBuilder();

                Document doc = builder.parse(textSource);
                NodeList nodelist = doc.getElementsByTagName("Prefix");

                Element element = (Element) nodelist.item(nodelist.getLength() - 2);
                ChromeDriverVersion = element.getTextContent();

                String Destination = "ChromeDriver\\chromedriver_win32.zip";
                String link = "https://chromedriver.storage.googleapis.com/" + ChromeDriverVersion + "chromedriver_win32.zip";
                //Closing ChromeDriver
                KingschAccount.StatusLBL.setText("Closing ChromeDriver");
                try {
                    Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
                } catch (Exception e) {
                };
                KingschAccount.StatusLBL.setText("Closed ChromeDriver");
                KingschAccount.StatusLBL.setText("Deleting Old ChromeDriver...");
                File Des = new File("ChromeDriver\\chromedriver.exe");
                //Deleting Existed one
                Des.delete();

                KingschAccount.StatusLBL.setText("Downloading Latest ChromeDriver...");
                URL urlChromeDriver = new URL(link);
                HttpURLConnection http = (HttpURLConnection) urlChromeDriver.openConnection();
                double fileSize = (double) http.getContentLengthLong();
                BufferedInputStream in = new BufferedInputStream(http.getInputStream());
                FileOutputStream fos = null;
                try {
                    fos = new FileOutputStream(Destination);
                } catch (Exception e) {
                    System.out.println(e);
                }
                //Closing ChromeDriver
                KingschAccount.StatusLBL.setText("Closing ChromeDriver");
                try {
                    Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
                } catch (Exception e) {
                };
                KingschAccount.StatusLBL.setText("Closed ChromeDriver");
                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);

                byte[] buffer = new byte[1024];
                double downloaded = 0.00;
                int read = 0;
                double percentDownloaded = 0.00;
                while ((read = in.read(buffer, 0, 1024)) >= 0) {
                    bout.write(buffer, 0, read);
                    downloaded += read;
                    percentDownloaded = (downloaded * 100) / fileSize;
                    String percent = String.format("%.2f", percentDownloaded);
                    KingschAccount.StatusLBL.setText(percent + "% Downloaded");
                }

                reader.close();
                bout.close();
                fos.close();
                in.close();
                Thread.sleep(1000);
                //Closing ChromeDriver
                KingschAccount.StatusLBL.setText("Closing ChromeDriver");
                try {
                    Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe");
                } catch (Exception e) {
                };
                KingschAccount.StatusLBL.setText("Closed ChromeDriver");
                Thread.sleep(1000);
                //Uzipping
                KingschAccount.StatusLBL.setText("Uzipping");
                Path source = Paths.get("ChromeDriver/chromedriver_win32.zip");
                Path target = Paths.get("ChromeDriver/");

                try {

                    unzip(source, target);
                    System.out.println("Done");

                } catch (IOException e) {
                    e.printStackTrace();
                }

                KingschAccount.StatusLBL.setText("Uzipped");

            }

            try {
                KingschAccount.StatusLBL.setText("Starting...");
                System.setProperty("webdriver.chrome.driver", "ChromeDriver\\chromedriver.exe");
                ChromeOptions options = new ChromeOptions();
                options.addArguments("--mute-audio");
//                KingschAccount.StatusLBL.setText("Adding extension...");
//                options.addExtensions(new File("C:\\Program Files\\Common Files\\ChromeDriver\\anticaptcha.crx"));
                DesiredCapabilities capabilities = new DesiredCapabilities();
                capabilities.setCapability(ChromeOptions.CAPABILITY, options);
                KingschAccount.StatusLBL.setText("Setting...");
                driver = new ChromeDriver(capabilities);
                driver.navigate().to(url);
                break;
            } catch (Exception e) {
                // String to be scanned to find the pattern.
                String line = e.getMessage();
                String pattern = "[0-9]+[.]";
                // Create a Pattern object
                Pattern r = Pattern.compile(pattern);
                // Now create matcher object.
                Matcher m = r.matcher(line);
                if (m.find()) {
                    ChromeVersion = m.group(0);
                }

                update = true;
                continue;
            }
        }

    }

    private void posting(WebDriver driver) {

    }
    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
        all:
        for (int i = 0; i < model.getRowCount(); i++) {
            String TextTBL = model.getValueAt(i, 1).toString();
            if (TextTBL.isEmpty()) {
                continue all;
            }
            BufferedReader br = null;
            String Email = "";
            String Text = model.getValueAt(i, 1).toString();
            String Image = model.getValueAt(i, 2).toString();

            try {
                br = new BufferedReader(new FileReader("C:\\Program Files\\Common Files\\CSVS\\Account.csv"));
                String line = "";
                int linecount = 0;
                String splitBy = ",";
                Reading:
                while ((line = br.readLine()) != null) {

                    if (i == linecount) {
                        String[] email = line.split(splitBy);    // use comma as separator
                        Email = email[0];
                        break Reading;
                    }
                    linecount = linecount + 1;
                }
            } catch (Exception e) {
            }
            try {
                OpenAndUpdateDriver("https://accounts.kingsch.at/?client_id=com.kingschat&post_redirect=true&scopes=%5B\"kingschat\"%5D&redirect_uri=https%3A%2F%2Fkingschat.online%2F");
                login(driver, Email);

            } catch (Exception e) {
            }
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
            }
            StartingPost(driver, Text, Image);

            driver.quit();
        }
    }//GEN-LAST:event_StartActionPerformed

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed

    }//GEN-LAST:event_StopActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
            model.setValueAt(selectedFile.getAbsolutePath(), Integer.parseInt(idLBL.getText()) - 1, 2);
            ImagePath.setText(selectedFile.getAbsolutePath());
            imageLBL.setText("<html><img src=\"file:" + selectedFile.getAbsolutePath() + "\" width=160 height=50/><html>");

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ContainingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ContainingTableMouseClicked
        int row = ContainingTable.rowAtPoint(evt.getPoint());
        int col = ContainingTable.columnAtPoint(evt.getPoint());
        DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
        idLBL.setText(model.getValueAt(row, 0).toString());
        Comments.setText(model.getValueAt(row, 1).toString());
        imageLBL.setText("<html><img src=\"file:" + model.getValueAt(row, 2).toString() + "\" width=160 height=50/><html>");

        ImagePath.setText(model.getValueAt(row, 2).toString());
    }//GEN-LAST:event_ContainingTableMouseClicked

    private void ImagePathInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ImagePathInputMethodTextChanged

    }//GEN-LAST:event_ImagePathInputMethodTextChanged

    private void CommentsInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_CommentsInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_CommentsInputMethodTextChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        boolean CommentText = checkText.isSelected();
        boolean ImageText = checkImage.isSelected();

        if (CommentText) {
            DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(Comments.getText().toString(), i, 1);
            }
        }

        if (ImageText) {
            DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                model.setValueAt(ImagePath.getText().toString(), i, 2);
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        boolean CommentText = checkText.isSelected();
        boolean ImageText = checkImage.isSelected();

        if (CommentText) {
            DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
            for (int i = 0; i < Integer.parseInt(Amoount.getText()); i++) {
                model.setValueAt(Comments.getText().toString(), i, 1);
            }
        }

        if (ImageText) {
            DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
            for (int i = 0; i < Integer.parseInt(Amoount.getText()); i++) {
                model.setValueAt(ImagePath.getText().toString(), i, 2);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void settoblankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settoblankActionPerformed
        boolean CommentText = checkText.isSelected();
        boolean ImageText = checkImage.isSelected();

        if (CommentText) {
            DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 1).toString() == "") {
                    model.setValueAt(Comments.getText().toString(), i, 1);
                }

            }
        }

        if (ImageText) {
            DefaultTableModel model = (DefaultTableModel) ContainingTable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 2).toString() == "") {
                    model.setValueAt(ImagePath.getText().toString(), i, 2);
                }
            }
        }
    }//GEN-LAST:event_settoblankActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KingschPosting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KingschPosting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KingschPosting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KingschPosting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KingschPosting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Amoount;
    private javax.swing.JTextField Comments;
    private javax.swing.JTable ContainingTable;
    private javax.swing.JTextField ImagePath;
    private javax.swing.JButton Start;
    private javax.swing.JButton Stop;
    private javax.swing.JCheckBox checkImage;
    private javax.swing.JCheckBox checkText;
    private javax.swing.JLabel idLBL;
    private javax.swing.JLabel imageLBL;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton settoblank;
    // End of variables declaration//GEN-END:variables
}
